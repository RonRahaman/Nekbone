# ================================================================================================
# Compilation and build environment
# ================================================================================================

vendor   = pgi     # Your compiler vendor [ gnu | intel | pgi | cray | ibm ]

CC       = mpicc   # Your C compiler
CFLAGS   =         # Debugging and optimization flags for C compiler
CPPFLAGS =         # C preprocessor options (-D)

FC       = mpif90  # Your Fortran90 compiler
FCFLAGS  =         # Debugging and optimization flags for Fortran90 compiler

LDFLAGS  =         # Linker options (-L and -s)
LIBS     =         # Libraries (-l)
FLIBS    =         # Additionl libs needed to compile Fortran

builddir = $(shell pwd)        # The build direcory.  Must contain the size file
srcdir   = $(builddir)/../../  # The top-level Nekbone directory

# ================================================================================================
# Nekbone options
# ================================================================================================



# ================================================================================================
# Source and destination directories
# ================================================================================================

objdir     = $(builddir)/obj
includedir = $(builddir)/include
VPATH      = $(srcdir)/src:$(srcdir)/src/jl

override CPPFLAGS += -I$(builddir) -I$(includedir) -I$(srcdir)/src -I$(srcdir)/src/jl

ifeq $(vendor) gnu
override FCFLAGS += -fdefault-real-8 -cpp -ffixed-form
else
ifeq $(vendor) intel
override FCFLAGS += -r8 -fpconstant -fpp -fixed
else
ifeq $(vendor) pgi
override FCFLAGS += -r8 -Mpreprocess -Mfixed
else
ifeq $(vendor) cray
override FCFLAGS += -r8 -Mpreprocess -Mfixed
else
ifeq $(vendor) ibm
override FCFLAGS += -qrealsize=8 -qdpc=e -qsuffix=cpp=f
else
$(error 'Must specify one of the following vendors in makefile: gnu, intel, pgi, cray, ibm')
endif
endif
endif
endif
endif

ifeq $(vendor) ibm
FC_DEFINE = '-WF,-D'
else
FC_DEFINE = '-D'
endif
override FCFLAGS  += $(subst -D, $(FC_DEFINE), $(CPPFLAGS))

# ================================================================================================
# FORTRAN objects
# ================================================================================================

# TODO: 
# * Should hsmg_acc always be included?
# * Which flags are necessary for FCFLAGS and LDFLAGS

f_drive_obj    = # The driver
f_opt_std_obj  = # Objects that will be compiled with standard optimation (-02)
f_opt_max_obj  = # Objects that will be compiled with maximum optimation (-03)
f_opt_null_obj = # Objects that will be compiled with no optimation (-00)
f_mpi_obj      = # MPI objects
f_cuda_obj     = # CUDA Fortran objects

ifdef NEKCOMM
# Running communication benchmark
f_drive_obj        = $(addprefix $(objdir)/, driver_comm.o)
f_opt_std_obj     += $(addprefix $(objdir)/, delay_dum.o hsmg.o hsmg_acc.o mxm_wrapper.o speclib.o)
f_opt_max_obj     += $(addprefix $(objdir)/, math.o mxm_std.o)
override CPPFLAGS += -DNEKCOMM
else
# Not running communication benchmark
f_drive_obj        = $(addprefix, $(objdir)/, driver.o)
f_opt_std_obj     += $(addprefix, $(objdir)/, hsmg.o hsmg_acc.o mxm_wrapper.o prox_dssum.o speclib.o)
f_opt_max_obj     += $(addprefix, $(objdir)/, cg.o math.o mxm_std.o prox_setup.o semhat.o)
ifdef NEKDLAY
# Running load-balance benchmark
f_opt_std_obj     += $(addprefix, $(objdir), delay.o)
override CPPFLAGS += -DNEKDLAY
else
# Not running load-balance benchmark
f_opt_std_obj     += $(addprefix, $(objdir), delay_dum.o)
endif
endif

# If using multigrid
ifdef MGRID
f_opt_null_obj    += $(addprefix, $(objdir), dsygv.o ssygv.o)
override CPPFLAGS += -DMGRID
endif

# If compiling with MPI
ifdef MPI
f_mpi_obj          = $(addprefix, $(objdir), comm_mpi.o)
else
f_mpi_obj          = $(addprefix, $(objdir), mpi_dummy.o)
endif

# If using GPU
ifdef OPENACC
f_opt_std_obj      += 
override FCFLAGS   += $(OPENACC_FCFLAGS)
ifdef CUDA
# If using CUDA
f_cuda_obj         = $(addprefix, $(objdir), ax_cuda.o)
override FCFLAGS   += $(CUDA_FCFLAGS)
endif
endif

f_lib_obj = $(f_opt_std_obj) $(f_opt_max_obj) $(f_opt_null_obj) $(f_mpi_obj) $(f_cuda_obj)

# ================================================================================================
# C objects
# ================================================================================================

jl_prefix  = jl_

jl_lib_obj = $(addprefix $(objdir)/$(jl_prefix), gs.o sort.o sarray_transfer.o sarray_sort.o \
             gs_local.o crystal.o comm.o tensor.o fail.o fcrystal.o)

# ================================================================================================
# Rules
# ================================================================================================

nekbone : $(f_drive_obj) $(f_lib_obj) $(jl_lib_obj)
	$(FC) -o $@ $^ $(LDFLAGS) $(LIBS) $(FLIBS)
	@size nek5000

$(f_drive_obj) $(f_opt_std_obj) : $(objdir)/%.o : %.f SIZE | $(objdir)
	$(FC) -c $(FCFLAGS) -O2 $< -o $@

$(f_opt_null_obj) : $(objdir)/%.o : %.f SIZE | $(objdir)
	$(FC) -c $(FCFLAGS) -O0 $< -o $@

$(f_opt_max_obj) : $(objdir)/%.o : %.f SIZE | $(objdir)
	$(FC) -c $(FCFLAGS) -O3 $< -o $@

$(f_mpi_obj) : $(objdir)/%.o : %.f SIZE mpiheader | $(objdir)
	$(FC) -c $(FCFLAGS) -O2 $< -o $@

$(f_cuda_obj) : $(objdir)/%.o : %.cuf SIZE mpiheader | $(objdir)
	$(FC) -c $(FCFLAGS) -O2 $< -o $@

$(jl_obj) : $(objdir)/$(jl_prefix)%.o : %.c | $(objdir)
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $< -o $@

mpiheader: | $(includedir)
ifneq ($(findstring mpi_dummy.o, $(nek_mpi_obj)),)
	cp $(srcdir)/Nek5000/core/mpi_dummy.h $(includedir)/mpif.h
else
	rm -rf $(srcdir)/Nek5000/core/mpif.h $(includedir)/mpif.h
endif

$(objdir) $(includedir):
	mkdir -p $@

clean:
	rm -rf nekbone $(f_drive_obj) $(f_lib_obj) $(jl_obj) $(srcdir)/Nek5000/core/mpif.h $(includedir)/mpif.h

.PHONY: mpiheader clean
